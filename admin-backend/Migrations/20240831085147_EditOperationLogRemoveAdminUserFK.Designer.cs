// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using admin_backend.Data;

#nullable disable

namespace CommonLibrary.Migrations
{
    [DbContext(typeof(MysqlDbContext))]
    [Migration("20240831085147_EditOperationLogRemoveAdminUserFK")]
    partial class EditOperationLogRemoveAdminUserFK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("admin_backend.Entities.AdSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminUserId")
                        .HasColumnType("int")
                        .HasComment("發佈者");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("名稱");

                    b.Property<string>("PhotoMobile")
                        .HasColumnType("longtext")
                        .HasComment("手機圖片");

                    b.Property<string>("PhotoPc")
                        .HasColumnType("longtext")
                        .HasComment("PC圖片");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態 0 = 關閉, 1 = 開啟");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("站台 1 = 林業自然保育署, 2 = 林業試驗所");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.ToTable("AdSetting");
                });

            modelBuilder.Entity("admin_backend.Entities.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("帳號");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("信箱");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("登入時間");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("姓名");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("密碼");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("照片");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasComment("角色");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態 0 = 關閉, 1 = 開啟");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AdminUser");
                });

            modelBuilder.Entity("admin_backend.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("聯絡人地址");

                    b.Property<int?>("AdminUserId")
                        .HasColumnType("int")
                        .HasComment("指派人");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("申請日期");

                    b.Property<string>("BaseCondition")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("樹基部狀況 1 = 水泥面 = 2, 柏油面 = 3, 植被泥土面 (地表有草皮或鬆潤木) = 4, 花台內 = 5, 人工鋪面 (水泥面、柏油面以外) = 6");

                    b.Property<int>("CaseNumber")
                        .HasColumnType("int")
                        .HasComment("案件編號");

                    b.Property<int>("CaseStatus")
                        .HasColumnType("int")
                        .HasComment("案件狀態 1 = 暫存, 2 = 待指派, 3 = 待簽核, 4 = 已結案, 5 = 已刪除, 6 = 退回");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("聯絡人縣市");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("DamageDescription")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("受害症狀描述");

                    b.Property<string>("DamageTreeAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("受害樹木地址");

                    b.Property<string>("DamageTreeCounty")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("受害樹木縣市");

                    b.Property<string>("DamageTreeDistrict")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("受害樹木區域");

                    b.Property<decimal?>("DamagedArea")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("受損面積");

                    b.Property<int?>("DamagedCount")
                        .HasColumnType("int")
                        .HasComment("受損數量");

                    b.Property<string>("DamagedPart")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("受害部位 1 = 根, 莖、4 = 枝條, 6 = 樹葉, 7 = 花果, 8 = 全株");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("聯絡人區域");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("Email");

                    b.Property<string>("Fax")
                        .HasColumnType("longtext")
                        .HasComment("傳真");

                    b.Property<DateTime?>("FirstDiscoveryDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("首次發現受害時間");

                    b.Property<int>("ForestCompartmentLocationId")
                        .HasColumnType("int")
                        .HasComment("林班位置");

                    b.Property<string>("ForestSection")
                        .HasColumnType("longtext")
                        .HasComment("林班");

                    b.Property<string>("ForestSubsection")
                        .HasColumnType("longtext")
                        .HasComment("小班");

                    b.Property<string>("LatitudeGoogle")
                        .HasColumnType("longtext")
                        .HasComment("緯度/Google");

                    b.Property<string>("LatitudeTgos")
                        .HasColumnType("longtext")
                        .HasComment("緯度/TGOS");

                    b.Property<string>("LocalPlantingTime")
                        .HasColumnType("longtext")
                        .HasComment("現地種植時間");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("立地種類 1 = 公園、校園, 人行道 = 2, 花台內 = 3, 建築周邊 = 4, 林地 = 5, 苗圃 = 6, 農地 = 7 , 空地 = 8");

                    b.Property<string>("LongitudeGoogle")
                        .HasColumnType("longtext")
                        .HasComment("經度/Google");

                    b.Property<string>("LongitudeTgos")
                        .HasColumnType("longtext")
                        .HasComment("經度/TGOS");

                    b.Property<string>("Others")
                        .HasColumnType("longtext")
                        .HasComment("其他");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("電話");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("圖片");

                    b.Property<decimal?>("PlantedArea")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("種植面積");

                    b.Property<int?>("PlantedCount")
                        .HasColumnType("int")
                        .HasComment("種植數量");

                    b.Property<int>("TreeBasicInfoId")
                        .HasColumnType("int")
                        .HasComment("樹木基本資料");

                    b.Property<string>("TreeDiameter")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("樹木直徑");

                    b.Property<string>("TreeHeight")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("樹木高度");

                    b.Property<string>("UnitName")
                        .HasColumnType("longtext")
                        .HasComment("單位名稱");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("申請人");

                    b.HasKey("Id");

                    b.HasIndex("ForestCompartmentLocationId");

                    b.HasIndex("TreeBasicInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("admin_backend.Entities.CaseDiagnosisResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int")
                        .HasComment("案件編號");

                    b.Property<int>("CommonDamageId")
                        .HasColumnType("int")
                        .HasComment("常見病蟲害");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("DiagnosisMethod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("診斷方式");

                    b.Property<string>("HarmPatternDescription")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("危害狀況詳細描述");

                    b.Property<string>("OldCommonDamageName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("危害病蟲名稱(舊)");

                    b.Property<string>("PreventionSuggestion")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("防治建議");

                    b.Property<string>("ReportingSuggestion")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("呈報建議");

                    b.Property<string>("ReturnReason")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("退回原因");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("學名");

                    b.Property<string>("SubmissionMethod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("送件方式");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CommonDamageId");

                    b.ToTable("CaseDiagnosisResult");
                });

            modelBuilder.Entity("admin_backend.Entities.CommonDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<int>("DamageClassId")
                        .HasColumnType("int")
                        .HasComment("危害種類ID");

                    b.Property<string>("DamageFeatures")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("危害特徵");

                    b.Property<string>("DamagePart")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("危害部位");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int")
                        .HasComment("危害類型ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("病蟲危害名稱");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("危害類型ID");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態 0 = 關閉, 1 = 開啟");

                    b.Property<string>("Suggestions")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("危害類型ID");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.HasIndex("DamageClassId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("CommonDamage");
                });

            modelBuilder.Entity("admin_backend.Entities.CommonPest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ControlRecommendations")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("防治建議");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("DamageCharacteristics")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("危害特徵");

                    b.Property<int>("DamageClassId")
                        .HasColumnType("int")
                        .HasComment("危害種類");

                    b.Property<string>("DamagePart")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("危害部位 2 = 侵害土壤部, 3 = 樹幹, 5 = 樹枝, 6 = 樹葉, 7 = 花, 9 = 全面異常症狀病害");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int")
                        .HasComment("危害類型");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("病蟲危害名稱");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("病蟲封面圖片");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態 0 = 關閉, 1 = 開啟");

                    b.Property<DateTime>("UnpublishDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("下架日期");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.HasIndex("DamageClassId");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("CommonPest");
                });

            modelBuilder.Entity("admin_backend.Entities.DamageClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int")
                        .HasComment("危害類型ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("危害種類");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態 0 = 關閉, 1 = 開啟");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("DamageClass");
                });

            modelBuilder.Entity("admin_backend.Entities.DamageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("危害類型");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態 0 = 關閉, 1 = 開啟");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("DamageType");
                });

            modelBuilder.Entity("admin_backend.Entities.Documentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("內容");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("使用條款類型 1 = 同意書, 2 = 使用說明");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("Documentation");
                });

            modelBuilder.Entity("admin_backend.Entities.EpidemicSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("內容");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("標題");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("EpidemicSummary");
                });

            modelBuilder.Entity("admin_backend.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminUserId")
                        .HasColumnType("int")
                        .HasComment("發佈者");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("答案");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("問題");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態 0 = 關閉, 1 = 開啟");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("admin_backend.Entities.ForestCompartmentLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AffiliatedUnit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("所屬管理處");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Postion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("位置");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("ForestCompartmentLocation");
                });

            modelBuilder.Entity("admin_backend.Entities.ForestDiseasePublications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("出版品作者");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasComment("出版品日期");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("出版品檔案");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("出版品連結");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("出版品名稱");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態 0 = 關閉, 1 = 開啟");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("出版品類型 林業叢刊 = 1, 相關摺頁 = 2");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("出版單位");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("ForestDiseasePublications");
                });

            modelBuilder.Entity("admin_backend.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("admin_backend.Entities.MailConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("寄信帳號");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<int>("Encrypted")
                        .HasColumnType("int")
                        .HasComment("加密方式 1 = SSL, 2 = TSL");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("主機");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("顯示名稱");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("寄信密碼");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasComment("Port");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("MailConfig");
                });

            modelBuilder.Entity("admin_backend.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminUserId")
                        .HasColumnType("int")
                        .HasComment("發佈者");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("發佈內容");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("排程結束時間");

                    b.Property<bool>("Pinned")
                        .HasColumnType("tinyint(1)")
                        .HasComment("置頂");

                    b.Property<bool>("Schedule")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否開啟排程");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("排程開始時間");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("發佈狀態 0 = 未發佈, 1 = 發佈");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("標題");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("公告類型 一般公告 = 1, 重要公告 = 2, 活動公告 = 3, 跑馬燈 = 4");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.Property<string>("WebsiteReleases")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("發佈網站 1 = 林業自然保育署, 2 = 林業試驗所");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("admin_backend.Entities.OperationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdminUserId")
                        .HasColumnType("int")
                        .HasComment("後台使用者ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("異動內容");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("IP");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("異動類型 新增 = 1, 指派 = 2, 編輯 = 3, 刪除 = 4");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    b.HasKey("Id");

                    b.ToTable("OperationLog");
                });

            modelBuilder.Entity("admin_backend.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("權限名稱");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("檢視 = 1, 新增 = 2, 指派 = 3, 編輯 = 4, 刪除 = 5");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("admin_backend.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("角色名稱");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("admin_backend.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Add")
                        .HasColumnType("tinyint(1)")
                        .HasComment("新增");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<bool>("Delete")
                        .HasColumnType("tinyint(1)")
                        .HasComment("刪除");

                    b.Property<bool>("Edit")
                        .HasColumnType("tinyint(1)")
                        .HasComment("編輯");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("選單名稱");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasComment("角色管理ID");

                    b.Property<bool>("Sign")
                        .HasColumnType("tinyint(1)")
                        .HasComment("指派");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.Property<bool>("View")
                        .HasColumnType("tinyint(1)")
                        .HasComment("檢視");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("admin_backend.Entities.TreeBasicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("名稱");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("學名");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("TreeBasicInfo");
                });

            modelBuilder.Entity("admin_backend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("帳號");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasComment("建立日期");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("最後登入時間");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("使用者名稱");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("密碼");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態 0 = 關閉, 1 = 開啟, 2 = 停用");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasComment("更新時間");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("admin_backend.Entities.AdSetting", b =>
                {
                    b.HasOne("admin_backend.Entities.AdminUser", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("admin_backend.Entities.AdminUser", b =>
                {
                    b.HasOne("admin_backend.Entities.Role", "Role")
                        .WithMany("AdminUser")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("admin_backend.Entities.Case", b =>
                {
                    b.HasOne("admin_backend.Entities.ForestCompartmentLocation", "ForestCompartmentLocation")
                        .WithMany()
                        .HasForeignKey("ForestCompartmentLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin_backend.Entities.TreeBasicInfo", "TreeBasicInfo")
                        .WithMany()
                        .HasForeignKey("TreeBasicInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin_backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForestCompartmentLocation");

                    b.Navigation("TreeBasicInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("admin_backend.Entities.CaseDiagnosisResult", b =>
                {
                    b.HasOne("admin_backend.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin_backend.Entities.CommonDamage", "CommonDamage")
                        .WithMany()
                        .HasForeignKey("CommonDamageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("CommonDamage");
                });

            modelBuilder.Entity("admin_backend.Entities.CommonDamage", b =>
                {
                    b.HasOne("admin_backend.Entities.DamageClass", "DamageClass")
                        .WithMany()
                        .HasForeignKey("DamageClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin_backend.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageClass");

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("admin_backend.Entities.CommonPest", b =>
                {
                    b.HasOne("admin_backend.Entities.DamageClass", "DamageClass")
                        .WithMany()
                        .HasForeignKey("DamageClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin_backend.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageClass");

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("admin_backend.Entities.DamageClass", b =>
                {
                    b.HasOne("admin_backend.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("admin_backend.Entities.FAQ", b =>
                {
                    b.HasOne("admin_backend.Entities.AdminUser", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("admin_backend.Entities.News", b =>
                {
                    b.HasOne("admin_backend.Entities.AdminUser", "AdminUser")
                        .WithMany()
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("admin_backend.Entities.RolePermission", b =>
                {
                    b.HasOne("admin_backend.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("admin_backend.Entities.Role", b =>
                {
                    b.Navigation("AdminUser");
                });
#pragma warning restore 612, 618
        }
    }
}
